#include "keys_nb_osx.h"
#include "keys_nb_win.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define WIN 1
#define SYMBOLS 2
#define NUMBERS 3
#define NAV 4
#define FUNCTION 5
#define BLUETOOTH 6
#define MOUSE 7
#define CLICK 8
#define SCRL 9
#define BIRO 10

&caps_word { continue-list = <NB_UNDERSCORE NB_MINUS WNB_UNDERSCORE WNB_MINUS BACKSPACE DEL>; };
// Change sticky key defaults
&sk {
    release-after-ms = <2000>;
    quick-release;
};
/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_ques {
            timeout-ms = <35>;
            key-positions = <7 6>;
            bindings = <&ques_excl>;
        };

        aa {
            timeout-ms = <35>;
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
        };

        ae {
            timeout-ms = <35>;
            bindings = <&kp APOS>;
            key-positions = <3 2>;
        };

        oe {
            timeout-ms = <35>;
            bindings = <&kp SEMI>;
            key-positions = <23 22>;
        };

        combo_paras {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&paras>;
            key-positions = <27 28>;
        };

        combo_squares {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&squares>;
            key-positions = <7 8>;
        };

        combo-curles {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&curles>;
            key-positions = <2 1>;
            layers = <0>;
        };

        combo-curles_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&curles_win>;
            key-positions = <2 1>;
            layers = <1>;
        };

        combo_crocs {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_LT>;
            key-positions = <22 21>;
            layers = <0>;
        };

        combo_crocs_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_LT>;
            key-positions = <22 21>;
            layers = <1>;
        };

        combo_at {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_AT>;
            key-positions = <2 7>;
            layers = <0>;
        };

        caps_word_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&caps_word>;
            key-positions = <11 18>;
        };

        amp_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_AMPS>;
            key-positions = <13 16>;
        };

        grave_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_GRAVE>;
            key-positions = <1 8>;
        };

        dollar_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_DLLR>;
            key-positions = <12 17>;
            layers = <0>;
        };

        percent_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_PRCNT>;
            key-positions = <16 7>;
        };

        hash_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_HASH>;
            key-positions = <23 26>;
        };

        win_curl_l {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_LBRC>;
            key-positions = <2 1>;
            layers = <1>;
        };

        win_curl_r {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_RBRC>;
            key-positions = <22 21>;
            layers = <1>;
        };

        win_at {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_AT>;
            key-positions = <2 7>;
            layers = <1>;
        };

        pipe_mac {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_PIPE>;
            key-positions = <7 17>;
            layers = <0>;
        };

        pipe_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_PIPE>;
            key-positions = <7 17>;
            layers = <1>;
        };

        bslh_mac {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_BSLH>;
            key-positions = <8 18>;
            layers = <0>;
        };

        bslh_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_BSLH>;
            key-positions = <8 18>;
            layers = <1>;
        };

        fslh_combo {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_FSLH>;
            key-positions = <6 16>;

            //global
        };

        dollar_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_DLLR>;
            key-positions = <12 17>;
            layers = <1>;
        };

        pnd_mac {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp NB_POUND_SIGN>;
            key-positions = <3 6>;
            layers = <0>;
        };

        pnd_win {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp WNB_POUND_SIGN>;
            key-positions = <3 6>;
            layers = <1>;
        };

        win_def {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&tog 1>;
            key-positions = <30 33>;
        };

        btn1_r {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&mkp MB1>;
            key-positions = <16 26>;
        };

        mb2_r {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&mkp MB2>;
            key-positions = <17 27>;
        };

        scrl_r {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&mo 10>;
            key-positions = <18 28>;
        };

        thumb_esc {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&kp ESCAPE>;
            key-positions = <30 31>;
        };

        thumb_bspc {
            timeout-ms = <50>;
            bindings = <&back_del>;
            key-positions = <33 32>;
        };

        boot_loader {
            timeout-ms = <35>;
            require-prior-idle-ms = <150>;
            bindings = <&bootloader>;
            key-positions = <29 19>;
        };
    };
};

/ {
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2 4 5 6 7 8 9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <16>;
    };

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <10>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        bindings = <&ib_wheel_scaler 1 25>;
    };

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            bindings = <&kp>, <&kp>;
            require-prior-idle-ms = <150>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 31 32>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            bindings = <&kp>, <&kp>;
            require-prior-idle-ms = <150>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 34 33>;
            hold-trigger-on-release;
        };
        lsscw: layer_sticky_shift_caps_word {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sscw>;
        };

        tt: toggle_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&tog>;
        };

        blt: balanced_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        repeat_encoder: repeat_encoder {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp BSPC>, <&key_repeat>;
        };

        tsl: behavior_trackball_scroll {
            compatible = "zmk,behavior-point-device-incremental";
            #trackball-binding-cells = <0>;
            mode = "scroll-mode";
            flavor = "default";
            scale_mode = "dividor";
            scale_factor = <4>;
            smoothing;
        };

        tkp_fast: behavior_trackball_key_press {
            compatible = "zmk,behavior-point-device-directional";
            #trackball-binding-cells = <4>;
            mode = "distance-mode";
            flavor = "2-dim";
            step_size = <50>;
        };

        lt_bspc: layer_tap_bspc_del {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&bspc_del>;

            tapping-term-ms = <200>;
        };

        shift_layer: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&sk>;

            tapping-term-ms = <200>;
            flavor = "hold-preferred";
            quick-tap-ms = <100>;
        };

        lt_spcesc: layer_tap_space_esc {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&spc_esc>;

            tapping-term-ms = <200>;
        };

        apos_dqt: quot_doublequot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NB_SINGLE_QUOTE>, <&kp NB_DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        apos_dqt_win: quot_doublequot_win {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp WNB_APOS>, <&kp WNB_DQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sscw: sticky_shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ques_excl: questionmark_exlamation_mark {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp NB_QMARK>, <&kp NB_EXCL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        paras: paras {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp NB_LPAR>, <&kp NB_RPAR>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        squares: squares {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp WNB_LBKT>, <&kp WNB_RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        curles: curles {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp NB_LBRC>, <&kp NB_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        curles_win: curles_win {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp WNB_LBRC>, <&kp WNB_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        crocs: crocs {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp NB_GT>, <&kp NB_LT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        shift_space: shift_space {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp SPACE>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
                bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        spc_esc: spc_esc {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp SPACE>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bootloader>, <&macro_press>;

            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
  &kp Q        &kp W        &kp F         &kp P           &kp B               &kp J        &kp L                  &kp U         &kp Y        &apos_dqt
  &hml LGUI A  &hml LALT R  &hml LCTRL S  &hml LSHFT T    &kp G               &kp M        &hmr RIGHT_SHIFT N     &hmr RCTRL E  &hmr LALT I  &hmr RGUI O
  &lt 8 Z      &kp X        &kp C         &kp D           &kp V               &kp K        &kp H                  &kp COMMA     &kp DOT      &kp NB_MINUS
                                          &lt_spcesc 2 0  &blt 5 BACKSPACE    &lt 6 ENTER  &lsscw 4 0
            >;

            sensor-bindings = <&inc_dec_kp TAB LS(TAB)>;
        };

        win {

            bindings = <
  &kp Q        &kp W        &kp F         &kp P           &kp B               &kp J        &kp L                  &kp U         &kp Y        &apos_dqt_win
  &hml LGUI A  &hml LALT R  &hml LCTRL S  &hml LSHFT T    &kp G               &kp M        &hmr RIGHT_SHIFT N     &hmr RCTRL E  &hmr LALT I  &hmr RGUI O
  &lt 8 Z      &kp X        &kp C         &kp D           &kp V               &kp K        &kp H                  &kp COMMA     &kp DOT      &kp NB_MINUS
                                          &lt_spcesc 3 0  &blt 5 BACKSPACE    &lt 7 ENTER  &lsscw 4 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numbers {
            bindings = <
  &kp LS(F5)    &kp LG(LC(Q))  &kp LS(F7)   &kp LS(F8)   &none     &kp NB_BSLH  &kp N7  &kp N8  &kp N9  &kp NB_STAR
  &kp LEFT_GUI  &kp LALT       &kp LCTRL    &kp LSHIFT   &tog 4    &kp NB_FSLH  &kp N4  &kp N5  &kp N6  &kp NB_EQUAL
  &kp LS(F9)    &kp LS(F10)    &kp LS(F11)  &kp LS(F12)  &none     &kp NB_PIPE  &kp N1  &kp N2  &kp N3  &kp NB_PLUS
                                            &none        &none     &kp DOT      &kp N0
            >;

            sensor-bindings = <&inc_dec_kp F3 LS(F3)>;
        };

        num_win {
            bindings = <
  &kp LS(F5)    &kp LG(L)    &kp LS(F7)   &kp LS(F8)   &none     &kp WNB_BSLH  &kp N7  &kp N8  &kp N9  &kp WNB_STAR
  &kp LEFT_GUI  &kp LALT     &kp LCTRL    &kp LSHIFT   &tog 4    &kp WNB_FSLH  &kp N4  &kp N5  &kp N6  &kp WNB_EQUAL
  &kp LS(F9)    &kp LS(F10)  &kp LS(F11)  &kp LS(F12)  &none     &kp WNB_PIPE  &kp N1  &kp N2  &kp N3  &kp WNB_PLUS
                                          &none        &none     &kp DOT       &kp N0
            >;

            sensor-bindings = <&inc_dec_kp F3 LS(F3)>;
        };

        nav {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //     |     |     |     |     |                |         |         |    ^   |     |      |
            //     |     |     |     |     |                |         |    <    |    v   |  >  |      |
            //     |     |     |     |     |                |         |   HOME  |        | END |      |
            //         |      |     |      |     |      |    PgDN   |   PgUP  |      |

            bindings = <
  &none     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none      &none  &none            &kp C_SLEEP  &kp C_POWER  &none
  &kp LEFT  &kp DOWN      &kp UP        &kp RIGHT     &tog 4     &none  &kp RIGHT_SHIFT  &kp LCTRL    &kp LALT     &kp LGUI
  &kp HOME  &kp PG_DN     &kp PG_UP     &kp END       &none      &none  &kp HOME         &none        &kp END      &new_macro
                                        &kp ESC       &kp TAB    &none  &none
            >;

            sensor-bindings = <&inc_dec_kp F3 LS(F3)>;
        };

        fn {
            // --------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //  F5 |  F6 | F7  | F8  |     |                |         |         |        |     |      |
            //  F1 |  F2 | F3  | F4  | DEL |                |         |         |        |     |      |
            //  F9 | F10 | F11 | F12 |     |                |   ,,    |   ,,    |        |     |      |
            //         |      |     |      |     |      |           |         |      |

            bindings = <
  &kp F5    &kp F6    &kp F7     &kp F8      &none      &none  &kp F7  &kp F8  &kp F9  &kp F12
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &kp DEL    &none  &kp F4  &kp F5  &kp F6  &kp F11
  &kp F9    &kp F10   &kp F11    &kp F12     &none      &none  &kp F1  &kp F2  &kp F3  &kp F10
                                 &none       &none      &none  &none
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_DEC C_BRI_INC>;
        };

        sym_mac {
            bindings = <
  &kp Q  &kp W        &kp E        &kp NB_TILDE  &kp T     &kp Y   &kp U      &kp I      &kp O     &kp O
  &kp P  &kp NB_BSLH  &kp NB_PIPE  &kp NB_SLASH  &kp F     &kp G   &kp LSHFT  &kp LCTRL  &kp LALT  &kp LEFT_GUI
  &kp Z  &kp X        &kp C        &kp V         &kp B     &kp N   &kp M      &kp COMMA  &kp DOT   &kp MINUS
                                   &trans        &trans    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        sym_win {
            bindings = <
  &kp Q  &kp W         &kp E         &kp WNB_TILDE  &kp T     &kp Y   &kp U       &kp I      &kp O     &kp O
  &kp P  &kp WNB_BSLH  &kp WNB_PIPE  &kp WNB_SLASH  &kp F     &kp G   &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI
  &kp Z  &kp X         &kp C         &kp V          &kp B     &kp N   &kp M       &kp COMMA  &kp DOT   &kp MINUS
                                     &trans         &trans    &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp F3 RS(F3)>;
        };

        mouse {
            bindings = <
  &none          &none         &none      &none           &none        &none      &none            &none      &none         &none
  &kp RIGHT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &none        &none      &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LEFT_GUI
  &none          &mo 10        &none      &none           &none        &none      &none            &none      &mo 10        &none
                                          &mkp LCLK       &mkp RCLK    &mkp RCLK  &mkp LCLK
            >;

            sensor-bindings = <&inc_dec_kp LC(PLUS) LC(MINUS)>;
        };

        click {
            bindings = <
  &trans     &trans    &trans     &trans      &trans       &trans     &trans           &trans     &trans    &trans
  &kp LGUI   &kp LALT  &kp LCTRL  &kp LSHIFT  &trans       &trans     &kp RIGHT_SHIFT  &kp RCTRL  &kp LALT  &kp RGUI
  &kp LCTRL  &trans    &kp LALT   &kp LCMD    &trans       &trans     &trans           &trans     &trans    &trans
                                  &mkp LCLK   &mkp RCLK    &mkp RCLK  &mkp LCLK
            >;
        };

        scrolly_moly {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans    &trans  &trans
            >;
        };

        biro {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans    &trans  &trans
            >;
        };
    };
};
